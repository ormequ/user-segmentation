// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"
	segments "user-segmentation/internal/entities/segments"

	mock "github.com/stretchr/testify/mock"

	service "user-segmentation/internal/service"
)

// SegmentsRepo is an autogenerated mock type for the SegmentsRepo type
type SegmentsRepo struct {
	mock.Mock
}

// ChangeUserSegments provides a mock function with given fields: ctx, userID, add, remove
func (_m *SegmentsRepo) ChangeUserSegments(ctx context.Context, userID int64, add []segments.Segment, remove []segments.Segment) service.ChangeErrors {
	ret := _m.Called(ctx, userID, add, remove)

	var r0 service.ChangeErrors
	if rf, ok := ret.Get(0).(func(context.Context, int64, []segments.Segment, []segments.Segment) service.ChangeErrors); ok {
		r0 = rf(ctx, userID, add, remove)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ChangeErrors)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, seg
func (_m *SegmentsRepo) Delete(ctx context.Context, seg segments.Segment) error {
	ret := _m.Called(ctx, seg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, segments.Segment) error); ok {
		r0 = rf(ctx, seg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserSegments provides a mock function with given fields: ctx, userID
func (_m *SegmentsRepo) GetUserSegments(ctx context.Context, userID int64) ([]segments.Segment, error) {
	ret := _m.Called(ctx, userID)

	var r0 []segments.Segment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]segments.Segment, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []segments.Segment); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]segments.Segment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, seg
func (_m *SegmentsRepo) Store(ctx context.Context, seg segments.Segment) error {
	ret := _m.Called(ctx, seg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, segments.Segment) error); ok {
		r0 = rf(ctx, seg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSegmentsRepo creates a new instance of SegmentsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentsRepo {
	mock := &SegmentsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
