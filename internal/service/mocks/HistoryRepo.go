// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"
	operations "user-segmentation/internal/entities/operations"

	mock "github.com/stretchr/testify/mock"
)

// HistoryRepo is an autogenerated mock type for the HistoryRepo type
type HistoryRepo struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, year, month
func (_m *HistoryRepo) Get(ctx context.Context, year int, month int) ([]operations.Operation, error) {
	ret := _m.Called(ctx, year, month)

	var r0 []operations.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]operations.Operation, error)); ok {
		return rf(ctx, year, month)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []operations.Operation); ok {
		r0 = rf(ctx, year, month)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]operations.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, year, month)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, ops
func (_m *HistoryRepo) Put(ctx context.Context, ops []operations.Operation) error {
	ret := _m.Called(ctx, ops)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []operations.Operation) error); ok {
		r0 = rf(ctx, ops)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHistoryRepo creates a new instance of HistoryRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHistoryRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *HistoryRepo {
	mock := &HistoryRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
